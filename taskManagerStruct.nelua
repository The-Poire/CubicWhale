##pragmas.nogc=true
require 'baseObjects'
--require 'memory'
global __THREAD_QUEUE_MUTEX:C.mtx_t
	assert(C.mtx_init(&__THREAD_QUEUE_MUTEX, C.mtx_plain) == C.thrd_success)
	require 'list'
--require 'C'
require 'thread'

global MeshGPUQueue_mtx:C.mtx_t
	assert(C.mtx_init(&MeshGPUQueue_mtx, C.mtx_plain) == C.thrd_success)
	global MeshGPUQueue_itm:type = @record{
		mapMesh:Mesh,
		boolean:boolean,
		x:int64,
		y:int64,
		z:int64,
	}
	global MeshGPUQueue:vector(MeshGPUQueue_itm)
	MeshGPUQueue:reserve(128)

local ThreadArg:type = @record{
	arg:pointer,
	id:byte,
}
--require 'C.time'


--require 'allocators.default'
--local Allocator: type = #[DefaultAllocator]#
--local alloc:Allocator

--##cflags '-lucrt'

##__TASK_MANAGER__ = true

global TASKS_IDS = @enum(int64){
	CREATE_CHUNK = 0,
	LOAD_CHUNK_TEXTURE = 1,
	FULL_CHUNK = 2,
}

local THREAD_AMOUNT = 12

local threadPool:[16]C.thrd_t
local tasks:[16]list([5]int64,libBO_allocator) -- [0-2]int64 : coordinates   [3] int64 -> pointer to WORLD  [4] -> taskID
local tasks_len:[16]byte
global function Sleep(milliseconds:int64)
   local start:C.timespec
	C.timespec_get( &start, C.TIME_UTC )

	local _end:C.timespec = start
	local new_nsec = _end.tv_nsec + milliseconds * 1000000
	_end.tv_sec = C.floor(_end.tv_sec + new_nsec / 1000000000)
	_end.tv_nsec = new_nsec % 1000000000
	
	local current:C.timespec;
	while true do
		C.timespec_get(&current, C.TIME_UTC)

		if current.tv_sec < _end.tv_sec then
			C.thrd_yield()
		elseif (current.tv_sec > _end.tv_sec) or (current.tv_nsec > _end.tv_nsec) then
			break
		else
			C.thrd_yield()
		end
	end
end


local function __main(arg:pointer):cint
	local id = (@*ThreadArg)(arg).id
	local taskList:*list([5]int64) = (@*list([5]int64))((@*ThreadArg)(arg).arg) --caching pointer to this thread tasks
  assert(C.mtx_lock(&__MEMORY_MUTEX) == C.thrd_success)
  alloc:dealloc(arg)
  assert(C.mtx_unlock(&__MEMORY_MUTEX) == C.thrd_success)
	local x:int64,y:int64,z:int64,tmp_var:[5]int64,world:*octree_t,tsk_id:int64,mapMesh:Mesh,bool:boolean --variable declarations
	while true do
		if tasks_len[id]>0 then
			assert(C.mtx_lock(&__THREAD_QUEUE_MUTEX) == C.thrd_success)
			--print(tasks_len[id])
			tmp_var= taskList:popfront()					--Initialisation of vars when task is detected
			tasks_len[id] = tasks_len[id] - 1
			assert(C.mtx_unlock(&__THREAD_QUEUE_MUTEX) == C.thrd_success)
			x,y,z=tmp_var[0],tmp_var[1],tmp_var[2]
			world=(@*octree_t)(tmp_var[3])
			tsk_id=tmp_var[4]

			switch tsk_id do
			case TASKS_IDS.CREATE_CHUNK then
				genChunk((@*chunk_t)(world:getNode(x*CHUNK_SIZE,y*CHUNK_SIZE,z*CHUNK_SIZE)),x,y,z)
			case TASKS_IDS.LOAD_CHUNK_TEXTURE then
				local chk=(@*chunk_t)(world:getNode(x,y,z))
				if chk.state>CHUNK_STATES.VOID then
					chk.state=CHUNK_STATES.LOADING
					mapMesh,bool = chk:genMesh(world,true)
					assert(C.mtx_lock(&MeshGPUQueue_mtx) == C.thrd_success)
	
						MeshGPUQueue:push({
							mapMesh=mapMesh,boolean=bool,
							x=x,y=y,z=z,
						})
	
					assert(C.mtx_unlock(&MeshGPUQueue_mtx) == C.thrd_success)
				end
			case TASKS_IDS.FULL_CHUNK then
				local chk = (@*chunk_t)(world:getNode(x,y,z))
				genChunk(chk,x//CHUNK_SIZE,y//CHUNK_SIZE,z//CHUNK_SIZE)
				chk:loadTexture(world)
			end
		else
			--Sleep(100)
			WaitTime(0.1)
			--assert(C.thrd_sleep(&(@C.timespec){tv_nsec=50000000},nilptr) == C.thrd_success)  --to avoid blocking CPU
		end
	end


	return 0
end

global function InitThreads()
	for i = 0,<THREAD_AMOUNT do
  		assert(C.mtx_lock(&__MEMORY_MUTEX) == C.thrd_success)
			local p:*ThreadArg = (@*ThreadArg)(alloc:alloc(#@ThreadArg))
  		assert(C.mtx_unlock(&__MEMORY_MUTEX) == C.thrd_success)
  		
		p.arg=&tasks[i]
		p.id=i
		tasks_len[i]=0
		assert(C.thrd_create(&threadPool[i],__main,p) == C.thrd_success)
	end
	return true
end

local function getFastestThread()
	local min:[2]uint32 = {0xfffffff,0}
	assert(C.mtx_lock(&__THREAD_QUEUE_MUTEX) == C.thrd_success)

	for i = 0,<THREAD_AMOUNT do
		if tasks_len[i]<min[0] then
			min={tasks_len[i],i}
		end
	end

	assert(C.mtx_unlock(&__THREAD_QUEUE_MUTEX) == C.thrd_success)
	--if min[1]>0 then print(min[1]) end
	return min[1]
end

global function addToQueue(taskId:TASKS_IDS,pos:[3]int64,world:*octree_t)
	if taskId==TASKS_IDS.LOAD_CHUNK_TEXTURE then
		 (@*chunk_t)(world:getNode(pos[0],pos[1],pos[2])).state=CHUNK_STATES.LOADING
	end
	local i = getFastestThread()
	local tuple:[5]int64 = {pos[0],pos[1],pos[2],(@int64)(world),taskId}
	assert(C.mtx_lock(&__THREAD_QUEUE_MUTEX) == C.thrd_success)
	tasks[i]:pushback(tuple)
	tasks_len[i] = tasks_len[i] + 1
	assert(C.mtx_unlock(&__THREAD_QUEUE_MUTEX) == C.thrd_success)
	return true
end

global function allTasksDone():boolean
	for i = 0,<THREAD_AMOUNT do
		if tasks_len[i]>0 then
			return false
		end
	end
	return true
end

global function queueLenght():int32
	local n:int32=0
	for i = 0,<THREAD_AMOUNT do
		n = n + tasks_len[i]
	end
	return n
end
