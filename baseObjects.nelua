require 'raylib/raylib'
require 'C.math'

require 'string'
global function toByte(str:string):byte
	local rtn:byte=0
	for i = 1,7 do
		if str[i]==49 then
			rtn=rtn+(@byte)(2^i)
		end
	end
	return rtn
end

global function loadByteMask(x:int64,y:int64,z:int64) <inline>
	local byte_mask:byte = x + y*4 + z*16
	local offset:byte
	--print(byte_mask)
	switch byte_mask do
	case 0  then byte_mask=0b00000001; offset = 0
	case 1  then byte_mask=0b00000010; offset = 1
	case 4  then byte_mask=0b00000100; offset = 2
	case 5  then byte_mask=0b00001000; offset = 3
	case 16 then byte_mask=0b00010000; offset = 4
	case 20 then byte_mask=0b00100000; offset = 5
	case 17 then byte_mask=0b01000000; offset = 6
	case 21 then byte_mask=0b10000000; offset = 7
	else panic()--{x,y,z,byte_mask})
	end
	return byte_mask,offset
end

global Cube: type = @record{
	x:int64,
	y:int64,
	z:int64,
	s:uint64,
}
--Actually AABB check
function Cube.__add(C1:*Cube,C2:*Cube)
	if (C2.s+C2.x > C1.x and C2.s+C2.y > C1.y  and C2.s+C2.z > C1.z) and (C1.s+C1.x > C2.x and C1.s+C1.y > C2.y  and C1.s+C1.z > C2.z) then
	--if (C2.x+C2.s >= C1x and C2.s+C2.y >= C1.y and C2.s+C2.z >= C1.z) and ())
	return true end
	return false
end
--
function Cube.__index(cube:*Cube,key:integer):int64
	switch key do
	case 0 then return cube.x
	case 1 then return cube.y
	case 2 then return cube.z
	case 3 then return cube.s
	else error("Cube indexing is limited to 0-3")
	end
	return 0
end
--Actually Distance
function Cube.__sub(c1:*Cube,c2:*Cube)
	return Vector3Distance(Vector3{c1.x,c1.y,c1.z},Vector3{c2.x,c2.y,c2.z})
end
function Cube:toVec()
	return Vector3{self[0],self[1],self[2]}
end

function Cube:__tostring()
	--return "x:"..tostring(self.x)..", y:"..tostring(self.y)..", z:"..self.z..", s:"..self.s
	return string.format("x:%d,y:%d,z:%d,s:%u",self.x,self.y,self.z,self.s)
end


--Comp b in a
global function subQuad(a:Cube,b:*Cube):(byte,byte,Cube) <inline>
	--Basic pre-collision test
	if not (a-b) then return 0b00000000,8 end
	--Normalize
	--print(a.x,a.y,a.z,b.x,b.y,b.z)
	a.x = a.x + a.s//2
	a.y = a.y + a.s//2
	a.z = a.z + a.s//2
	--print(a.x,a.y,a.z,b.x,b.y,b.z)
	--Calculate
	if     b.x<a.x and b.y<a.y and b.z<a.z then
		return 0b00000001,0,(@Cube){
															x=a.x - a.s//2,
															y=a.y - a.s//2,
															z=a.z - a.s//2,
															s=0
														}
	elseif b.x>=a.x and b.y<a.y and b.z<a.z then
		return 0b00000010,1,(@Cube){
															x=a.x,
															y=a.y - a.s//2,
															z=a.z - a.s//2,
															s=0
														}
	elseif b.x<a.x and b.y>=a.y and b.z<a.z then
		return 0b00000100,2,(@Cube){
															x=a.x - a.s//2,
															y=a.y,
															z=a.z - a.s//2,
															s=0
														}
	elseif b.x<a.x and b.y<a.y and b.z>=a.z then
		return 0b00001000,3,(@Cube){
															x=a.x - a.s//2,
															y=a.y - a.s//2,
															z=a.z,
															s=0
														}
	elseif b.x>=a.x and b.y>=a.y and b.z<a.z then
		return 0b00010000,4,(@Cube){
															x=a.x,
															y=a.y,
															z=a.z - a.s//2,
															s=0
														}
	elseif b.x>=a.x and b.y<a.y and b.z>=a.z then
		return 0b00100000,5,(@Cube){
															x=a.x,
															y=a.y - a.s//2,
															z=a.z,
															s=0
														}
	elseif b.x<a.x and b.y>=a.y and b.z>=a.z then
		return 0b01000000,6,(@Cube){
															x=a.x - a.s//2,
															y=a.y,
															z=a.z,
															s=0
														}
	elseif b.x>=a.x and b.y>=a.y and b.z>=a.z then
		return 0b10000000,7,(@Cube){
															x=a.x,
															y=a.y,
															z=a.z,
															s=0
														}
	end
	return 0b00000000,8
end


require 'vector'
global dealloc_list:vector(pointer)