##pragmas.nogc=true	
require 'memory'
require 'hash'
require 'span'
require 'C'
require 'C.threads'
require 'baseObjects'

require 'allocators.default'
local Allocator: type = #[DefaultAllocator]#
local alloc:Allocator

global octree_t:type = @record{
	parent_node:*octree_t,
	child_nodes:[8]pointer,
	child_types:byte,
	model:Model,
	pos:Cube
}
##__OCTREE_T__ = true
##if not __CHUNK_T__ then
	global CHUNK_SIZE <comptime> = 16
##end

global ALREADY_TAKEN_NODE <const> = 0
global NODE_SUCCESS <const> = 1
global NODE_CREATION__BOUNDING_ERROR <const> = 2


--From left to right
--packed_bool(0101011,2) -> true
--packed_bool(1011010,5) -> false
global function packed_bool(pckd:byte,idx:byte):boolean
	## cemit '	return (( pckd & (1 << (idx-1) ) ) ? false : true );'
	return false
end--##[==[cemitdefn [[bool octreeStruct_packed_bool(uint8_t pckd, uint8_t idx) {return (( pckd & (1 << (idx-1) ) ) ? false : true );}]]]==]

global function newOctree(x:int64,y:int64,z:int64,s:uint64,p:facultative(*octree_t),root:facultative(*octree_t)):octree_t
	local rtn:octree_t
	--We suppose that the octree is the lowest-level oct
	--print(x,y,z,(s*CHUNK_SIZE) or (2*CHUNK_SIZE))
	rtn.pos = (@Cube){x=x,y=y,z=z,s=(s*CHUNK_SIZE) or (2*CHUNK_SIZE)}
	##if not p.type.is_niltype then
		--print(p)
		$p=rtn
		--print(p)
		## if not root.type.is_niltype then
			p.parent_node = (@*octree_t)(root)
		##end
		--return &rtn
	--##else
		--return rtn
	##end
	--assert(C.mtx_init(&rtn.blockMutex, C.mtx_plain) == C.thrd_success)
	--assert(C.mtx_init(&rtn.modelMutex, C.mtx_plain) == C.thrd_success)
	return rtn
end

local function printOct(currOct:*octree_t)
	local str:string = currOct.pos:__tostring()
	print("currOct",str)
	str:destroy()
end

function octree_t:getNode(x:int64,y:int64,z:int64)
	x=x//CHUNK_SIZE*CHUNK_SIZE
	y=y//CHUNK_SIZE*CHUNK_SIZE
	z=z//CHUNK_SIZE*CHUNK_SIZE
	--print("Adding Node at ",x,y,z,CHUNK_SIZE)
	local chube:Cube = {x=x,y=y,z=z,s=CHUNK_SIZE}
	local currOct:*octree_t=self
	while true do
		--printOct(currOct)
		local offset:byte
		local byte_mask:byte
			byte_mask,offset = subQuad(currOct.pos,chube)
		--print(currOct,offset,byte_mask,currOct.child_nodes[offset]==nilptr)
		if offset==8 or currOct.child_nodes[offset]==nilptr then
			return
		elseif currOct.pos.s>>1>CHUNK_SIZE then
			currOct = (@*octree_t)(currOct.child_nodes[offset])
		else
			return currOct.child_nodes[offset]
		end
	end
	return
end

--New Chunk
require 'chunkStruct'
function octree_t:addNode(x:int64,y:int64,z:int64)
	x=x//CHUNK_SIZE*CHUNK_SIZE
	y=y//CHUNK_SIZE*CHUNK_SIZE
	z=z//CHUNK_SIZE*CHUNK_SIZE
	local _x,_y,_z=x,y,z
	--print("Adding Node at ",x,y,z,CHUNK_SIZE)
	local chube:Cube = {x=x,y=y,z=z,s=CHUNK_SIZE}
	local currOct:*octree_t=self
	while true do
		--printOct(currOct)

		local offset:byte
		local byte_mask:byte
		local tmpCube:Cube
			byte_mask,offset,tmpCube = subQuad(currOct.pos,chube)
			_x,_y,_z = tmpCube.x,tmpCube.y,tmpCube.z
		if offset==8 then
			return false, NODE_CREATION__BOUNDING_ERROR
		elseif currOct.pos.s>>1>CHUNK_SIZE then

			--print(byte_mask,offset,_x,_y,_z)
			if unlikely(currOct.child_nodes[offset] == nilptr) then
				local oct:pointer = (alloc:alloc0(#@octree_t))
				dealloc_list:push(oct)
				--print(currOct.pos.s//CHUNK_SIZE//2)
				newOctree(_x,_y,_z,
					(currOct.pos.s>>1)//CHUNK_SIZE,
					(@*octree_t)(oct),currOct)
				print("Creating Sub-Node at",_x,_y,_z,currOct.pos.s>>1,(@*octree_t)(oct),self)
				--currOct.child_types = currOct.child_types & ~byte_mask
				currOct.child_nodes[offset] = oct
			end
			currOct = (@*octree_t)(currOct.child_nodes[offset])
			--print(currOct.pos.s//2+currOct.pos.x)
		else
			--print(currOct.pos.s)
			--print(currOct.child_types,byte_mask,currOct.child_types | byte_mask)
			currOct.child_types = currOct.child_types | byte_mask
			local chk:pointer = (alloc:alloc0(#@chunk_t))
			--print("Creating Chunk at",self.pos.x+x*CHUNK_SIZE,self.pos.y+y*CHUNK_SIZE,self.pos.z+z*CHUNK_SIZE,(@*chunk_t)(chk),self)
			newChunk(_x,_y,_z,(@*chunk_t)(chk),currOct)
			currOct.child_nodes[offset] = chk
			return true,NODE_SUCCESS
		end
	end
	--[=======[
	while true do
		printOct(currOct)
		--print("nodeit",((x-currOct.pos.x)//(currOct.pos.s)),((y-currOct.pos.y)//(currOct.pos.s)),((z-currOct.pos.z)//(currOct.pos.s)),currOct.pos.s)

		if currOct.pos.s == 32 then
			--print(currOct.pos.s//2,((_y-currOct.pos.y)/(currOct.pos.s//2)))
			--printOct(currOct)
			x=((_x-currOct.pos.x)//(currOct.pos.s//2))
			y=((_y-currOct.pos.y)//(currOct.pos.s//2))
			z=((_z-currOct.pos.z)//(currOct.pos.s//2))
			local byte_mask,offset = loadByteMask(x,y,z)

			currOct.child_types = currOct.child_types | byte_mask
			local chk:pointer = (alloc:alloc0(#@chunk_t))
			print("Creating Chunk at",currOct.pos.x+x*CHUNK_SIZE,currOct.pos.y+y*CHUNK_SIZE,currOct.pos.z+z*CHUNK_SIZE,(@*chunk_t)(chk),self)
			newChunk(currOct.pos.x+x*CHUNK_SIZE,currOct.pos.y+y*CHUNK_SIZE,currOct.pos.z+z*CHUNK_SIZE,(@*chunk_t)(chk),currOct)
			currOct.child_nodes[offset] = chk
			break
		end

		--print(x,y,z)
		if currOct.pos+(@Cube){x=_x,y=_y,z=_z,s=CHUNK_SIZE} then
			x=((_x-currOct.pos.x)//(currOct.pos.s//2-1))
			y=((_y-currOct.pos.y)//(currOct.pos.s//2-1))
			z=((_z-currOct.pos.z)//(currOct.pos.s//2-1))
			print(x,y,z)
	
			local byte_mask,offset = loadByteMask(x,y,z)
			--print(offset,currOct.child_nodes[offset],nilptr)
			if unlikely(currOct.child_nodes[offset] == nilptr) then
				local oct:pointer = (alloc:alloc0(#@octree_t))
				dealloc_list:push(oct)
				--print(currOct.pos.s//CHUNK_SIZE//2)
				newOctree(x*currOct.pos.s//2,y*currOct.pos.s//2,z*currOct.pos.s//2,	
					currOct.pos.s//2//CHUNK_SIZE,
					(@*octree_t)(oct),currOct)
				print("Creating Sub-Node at",x,y,z,currOct.pos.s//2,(@*octree_t)(oct),self)
				--currOct.child_types = currOct.child_types & ~byte_mask
				currOct.child_nodes[offset] = oct
			end
			currOct=(@*octree_t)(currOct.child_nodes[offset])
		else
			if likely(currOct.parent_node == nilptr) then
				local oct:pointer = (alloc:alloc0(#@octree_t))
				dealloc_list:push(oct)
				--print(currOct.pos.s//CHUNK_SIZE//2)
				newOctree(currOct.pos.x-currOct.pos.s,currOct.pos.y-currOct.pos.s,currOct.pos.z-currOct.pos.s,	
					currOct.pos.s*2//CHUNK_SIZE,
					(@*octree_t)(oct))
				print("Creating Root-Node at",currOct.pos.x-currOct.pos.s,currOct.pos.y-currOct.pos.s,currOct.pos.z-currOct.pos.s,currOct.pos.s*2,(@*octree_t)(oct),self)
				currOct.parent_node = (@*octree_t)(oct)

				x=((currOct.pos.x-currOct.parent_node.pos.x)//(currOct.parent_node.pos.s//2-1))
				y=((currOct.pos.y-currOct.parent_node.pos.y)//(currOct.parent_node.pos.s//2-1))
				z=((currOct.pos.z-currOct.parent_node.pos.z)//(currOct.parent_node.pos.s//2-1))
				print(x,y,z)
				local byte_mask,offset = loadByteMask(x,y,z)
				currOct.parent_node.child_nodes[offset]=(@pointer)(currOct)
			end
			currOct = currOct.parent_node
		end
		--assert(_y~=48 or offset==2)
	end--]=======]
	--[==[]=]
	if self.pos+(@Cube){x=x,y=y,z=z,s=CHUNK_SIZE} then

		if self.pos.s == CHUNK_SIZE*2 then

			x,y,z = (x-self.pos.x)//CHUNK_SIZE,(y-self.pos.y)//CHUNK_SIZE,(z-self.pos.z)//CHUNK_SIZE
			--print(CHUNK_SIZE,(x//CHUNK_SIZE-self.pos.x//CHUNK_SIZE),(y//CHUNK_SIZE-self.pos.y//CHUNK_SIZE),(z//CHUNK_SIZE-self.pos.z//CHUNK_SIZE))
			print(CHUNK_SIZE,x,y,z)
			local byte_mask,offset = loadByteMask(x,y,z)
			if packed_bool(self.child_types,offset+1) then
				return false, ALREADY_TAKEN_NODE
			end
			--print(self.child_types)
			self.child_types = self.child_types | byte_mask
			local chk:pointer = (alloc:alloc0(#@chunk_t))
			print("Creating Chunk at",self.pos.x+x*CHUNK_SIZE,self.pos.y+y*CHUNK_SIZE,self.pos.z+z*CHUNK_SIZE,(@*chunk_t)(chk),self)
			newChunk(self.pos.x+x*CHUNK_SIZE,self.pos.y+y*CHUNK_SIZE,self.pos.z+z*CHUNK_SIZE,(@*chunk_t)(chk),self)
			self.child_nodes[offset] = chk
			--print(self.child_nodes[offset],chk)
			--print(self.child_types)
			--print(byte_mask)

		else

			local currOct:*octree_t = self
			require 'vector'
			local next_node_pointer:vector(*octree_t) <close>
			local byte_mask,offset
			while true do
				do
					local str:string = currOct.pos:__tostring()
					print("nodeit",str,currOct.pos.s//2,currOct.pos.s//CHUNK_SIZE//2,offset)
					str:destroy()
				end
				print(x,y,z,currOct.pos.x,currOct.pos.y,currOct.pos.z,((x-currOct.pos.x)//(currOct.pos.s//2)),((y-currOct.pos.y)//(currOct.pos.s//2)),((z-currOct.pos.z)//(currOct.pos.s//2)))

				byte_mask,offset = loadByteMask(
					((x-currOct.pos.x)//(currOct.pos.s//2)),
					((y-currOct.pos.y)//(currOct.pos.s//2)),
					((z-currOct.pos.z)//(currOct.pos.s//2))
				)
				if currOct.pos.s > 32 and packed_bool(currOct.child_types,offset+1) then
					if unlikely(currOct.child_nodes[offset] == nilptr) then
						local oct:pointer = (alloc:alloc0(#@octree_t))
						dealloc_list:push(oct)
						--print(currOct.pos.s//CHUNK_SIZE//2)
						newOctree(
							((x-currOct.pos.x)//(currOct.pos.s//2)),
							((y-currOct.pos.y)//(currOct.pos.s//2)),
							((z-currOct.pos.z)//(currOct.pos.s//2)),	
							currOct.pos.s//CHUNK_SIZE//2,
							(@*octree_t)(oct),currOct)
						currOct.child_nodes[offset] = oct
						x = ((x-currOct.pos.x)//(currOct.pos.s//2))
						y = ((y-currOct.pos.y)//(currOct.pos.s//2))
						z = ((z-currOct.pos.z)//(currOct.pos.s//2))
					end
					--print(nilptr,currOct.child_nodes[offset],packed_bool(currOct.child_types,offset+1),(@*octree_t)(	currOct.child_nodes[offset]).pos.s)
					currOct = (@*octree_t)(currOct.child_nodes[offset])
				else
					if likely(currOct.child_nodes[offset] == nilptr) then
						local chk:pointer = (alloc:alloc0(#@chunk_t))
						print("Creating Chunk at",((x-currOct.pos.x)//(currOct.pos.s//2)),((y-currOct.pos.y)//(currOct.pos.s//2)),((z-currOct.pos.z)//(currOct.pos.s//2)),(@*chunk_t)(chk),currOct)
						newChunk(
							((x-currOct.pos.x)//(currOct.pos.s//2)),
							((y-currOct.pos.y)//(currOct.pos.s//2)),
							((z-currOct.pos.z)//(currOct.pos.s//2)),
							(@*chunk_t)(chk),currOct)
						self.child_nodes[offset] = chk
						self.child_types = self.child_types | byte_mask
						return true, NODE_SUCCESS
					else
						return false, ALREADY_TAKEN_NODE
					end
					break
				end
				--if #next_node_pointer==0 then break end
				--currOct = next_node_pointer:pop()
			end

		end
	else

		local currOct:*octree_t=self
		while not (currOct.pos+(@Cube){x=x,y=y,z=z,s=CHUNK_SIZE}) do
			if unlikely(currOct.parent_node==nilptr) then
				local oct:pointer = (alloc:alloc0(#@octree_t))
				dealloc_list:push(oct)
				print(
					(currOct.pos.x//(currOct.pos.s*2)-currOct.pos.s),
					(currOct.pos.y//(currOct.pos.s*2)-currOct.pos.s),
					(currOct.pos.z//(currOct.pos.s*2)-currOct.pos.s),
					currOct.pos.s*2)
				newOctree(
					(currOct.pos.x//(currOct.pos.s*2)-currOct.pos.s),
					(currOct.pos.y//(currOct.pos.s*2)-currOct.pos.s),
					(currOct.pos.z//(currOct.pos.s*2)-currOct.pos.s),
					currOct.pos.s//CHUNK_SIZE*2,
					(@*octree_t)(oct))
				currOct.parent_node = (@*octree_t)(oct)
			end

			currOct=currOct.parent_node
		end
	end--]==]
	return true, NODE_SUCCESS
end

--Optimize Oct ==> LODs
function octree_t:parseOct()
	--TODO
end

function octree_t:freeAllNodes():boolean
	##if DEBUG or DEBUG8_freeAllNodes then
		print("Started freeing all nodes from Octree",self)
	##end
	local currOct:*octree_t = self
	while currOct.parent_node~=nilptr do
		currOct = currOct.parent_node
	end
	require 'vector'
	local next_node_pointer:vector(*octree_t) <close>
	local last_node_pointer:vector(*octree_t) <close>
	while true do
		for i = 0,7 do
			##if DEBUG or DEBUG8_freeAllNodes then
				print(i,packed_bool(currOct.child_types,i+1),currOct.child_nodes[i])
			##end
			if not packed_bool(currOct.child_types,i+1) then
				(@*chunk_t)(currOct.child_nodes[i]):destroy()
				alloc:dealloc(currOct.child_nodes[i])
			elseif currOct.child_nodes[i]~=nilptr then
				next_node_pointer:push((@*octree_t)(currOct.child_nodes[i]))
				--last_node_pointer:push((@*octree_t)(currOct.child_nodes[i]))
				##if DEBUG or DEBUG8_freeAllNodes then
					print("Pushed node",i,currOct.child_nodes[i])
				##end
			end
		end
		--alloc:dealloc(currOct)
		if #next_node_pointer==0 then break end
		currOct = next_node_pointer:pop()

		##if DEBUG or DEBUG8_freeAllNodes then
			print("Switched to node",currOct)
		##end
	end

	while true do
		if #dealloc_list==0 then break end
		alloc:dealloc(dealloc_list:pop())
	end


	--[[currOct = self
	while true do
		if #last_node_pointer==0 then break end
		currOct = last_node_pointer:pop()
		if currOct~=nilptr then
			print(currOct)
		end
		--print(currOct,self)
		--if currOct ~= self and currOct~=nilptr then
		--	alloc:dealloc(currOct)
		--end
	end]]

	return true
end

function octree_t:drawAllNodes():boolean
	local currOct:*octree_t = self
	while currOct.parent_node~=nilptr do
		currOct = currOct.parent_node
	end
	require 'vector'
	local next_node_pointer:vector(*octree_t) <close>
	while true do
		for i = 0,7 do
			if not packed_bool(currOct.child_types,i+1) then
				(@*chunk_t)(currOct.child_nodes[i]):draw()
			elseif currOct.child_nodes[i]~=nilptr then
				next_node_pointer:push((@*octree_t)(currOct.child_nodes[i]))
			end
		end
		if #next_node_pointer==0 then break end
		currOct = next_node_pointer:pop()
	end
	return true
end

function octree_t:destroy()
	self:freeAllNodes()
	--alloc:spandealloc(self.blockArray)
	--alloc:spandealloc(self.blockDictionary)
end

function octree_t:__close()
	self:destroy()
end

##if DEBUG or DEBUG8_tests then
--print(toByte("01011011"))
assert(packed_bool(toByte('0101101'),2)==true)
assert(packed_bool(toByte('0101101'),4)==true)
assert(packed_bool(toByte('0101101'),7)==true)
assert(packed_bool(toByte('0101101'),6)==false)
assert(packed_bool(toByte('1001101'),6)==false)
print(#[math.mininteger]#,0xfffffffffffffff_u64)
do
	local oct:octree_t <close> = newOctree(-9223372036854775808,-9223372036854775808,-9223372036854775808,18446744073709551615_u64//CHUNK_SIZE)--0x7fffffffffffffff_u64
	oct:addNode(0,31,15)
	print("1 - DONE  |  args:",0,31,15)
	oct:addNode(0,65,0)
	print("2 - DONE  |  args:",0,65,0)
	oct:addNode(0,63,0)
	print("3 - DONE  |  args:",0,63,0)
	oct:addNode(0,-64,0)
	print("4 - DONE  |  args:",0,-64,0)
	--[[for i = 1,16 do
		for k = 1,16 do
			for j = 1,16 do
				oct:addNode(i,k,j)
			end
		end
	end
	print("3 - DONE")]]
end
##end