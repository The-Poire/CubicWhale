--## pragmas.nogc = true
## cdefine 'RLIGHTS_IMPLEMENTATION'
require "raylib/raylib"
--##cflags '-Lc:/msys64/lib/gawk'
--##cflags '-D_UCRT'
##cflags '-lucrt'


require 'thread'
require 'C.math'

## if ccinfo.has_c11_atomics then
require 'C.stdatomic'
local atomic_counter: integer <atomic> = 0
## end
local counter: integer = 0
local mutex: C.mtx_t

local function thread_safe_print(...: varargs)
  assert(C.mtx_lock(&mutex) == C.thrd_success)
  print(...)
  assert(C.mtx_unlock(&mutex) == C.thrd_success)
end

global function Sleep(milliseconds:int64)
   local start:C.timespec
  C.timespec_get( &start, C.TIME_UTC )

  local _end:C.timespec = start
  local new_nsec = _end.tv_nsec + milliseconds * 1000000
  _end.tv_sec = C.floor(_end.tv_sec + new_nsec / 1000000000)
  _end.tv_nsec = new_nsec % 1000000000
  
  local current:C.timespec;
  while ( true ) do
    C.timespec_get( &current, C.TIME_UTC )

    if ( current.tv_sec < _end.tv_sec ) then
      C.thrd_yield()
    elseif ( current.tv_sec > _end.tv_sec ) or ( current.tv_nsec > _end.tv_nsec ) then
      break
    else
      C.thrd_yield()
    end
  end
end

local function add_thread(arg: pointer): cint
  local tid: isize = (@isize)(arg)
  thread_safe_print('started thread', tid)
  for i=1,1000 do
    assert(C.mtx_lock(&mutex) == C.thrd_success)
    counter = counter + 1
    assert(C.mtx_unlock(&mutex) == C.thrd_success)
    Sleep(3)
    ## if ccinfo.has_c11_atomics then
    C.atomic_fetch_add(&atomic_counter, 1)
    ## end
  end
  return tid
end

-- Initialize mutex.
assert(C.mtx_init(&mutex, C.mtx_plain) == C.thrd_success)

-- Create threads.
local thrds: [1000]C.thrd_t
for i:isize=0,<1000 do
  assert(C.thrd_create(&thrds[i], add_thread, (@pointer)(i)) == C.thrd_success)
end

-- Wait threads.
for i=0,<1000 do
  local res: cint
  assert(C.thrd_join(&thrds[i], &res) == C.thrd_success)
  assert(res == i)
  thread_safe_print('joined thread', i)
end

-- Destroy mutex.
C.mtx_destroy(&mutex)

print('counter', counter)
assert(counter == 1000000)
## if ccinfo.has_c11_atomics then
assert(atomic_counter == 1000000)
## end
