## cdefine 'RLIGHTS_IMPLEMENTATION'
require "raylib/raylib"

local SCREEN_WIDTH: uint16 <const> = 1000
local SCREEN_HEIGHT: uint16 <const> = 650

InitWindow(SCREEN_WIDTH,SCREEN_HEIGHT, "WhaleBlock v.0.0.0.00")
	local camera = Camera3D{} -- Define the camera to look into our 3d world
	camera.position = Vector3{ 10, 10, 10 } -- Camera position
	camera.target = Vector3{ 0, 0, 0 } -- Camera looking at point
	camera.up = Vector3{ 0, 1, 0 } -- Camera up vector (rotation towards target)
	camera.fovy = 45 -- Camera field-of-view Y
	camera.projection = 0 -- Camera projection type
	
	DisableCursor() -- Limit cursor to relative movement inside the window
	SetTargetFPS(10000)
	SetTraceLogLevel(TraceLogLevel.LOG_WARNING)

local shader:Shader = LoadShader("lighting.vs","lighting.fs")
  shader.locs[SHADER_LOC_VECTOR_VIEW] =  GetShaderLocation(shader, "viewPos");
  -- Set shader value: ambient light level
  local ambientLoc:cint = GetShaderLocation(shader, "ambient");
  local var:[4]float64 = { 10,100,10,50 }
  SetShaderValue(shader, ambientLoc, &var, SHADER_UNIFORM_VEC4);

require 'octreeStruct'
require 'chunkStruct'

----======INIT ENTITIES======--
--require 'entityStruct'
--local ent:entity_t = newEntity(entityType.CUBE,Vector3{-.1,200,-.1},Vector3{2,.9,2},1,1,1)


--======INIT THREADS======--
require 'taskManagerStruct'
InitThreads()

local WORLD_SIZE <comptime> = 4
local WORLD_HEIGHT <comptime> = 4
local WORLD_VOLUME <comptime> = (WORLD_SIZE+1)*(WORLD_SIZE+1)*(WORLD_HEIGHT+1)*8
local renderDistance <comptime> = 4
local t = GetTime()
local _WORLD:octree_t <close> = newOctree(-(1<<62),-(1<<62),-(1<<62),(1_u64<<63)//CHUNK_SIZE)
_WORLD:addNode(0,0,0)
local WORLD:*octree_t=(@*octree_t)(_WORLD:getNodeRoot(0,0,0))
--_WORLD:addNode(-CHUNK_SIZE*WORLD_SIZE*2,-CHUNK_SIZE*WORLD_SIZE*2,-CHUNK_SIZE*WORLD_SIZE*2)
--local WORLD:*octree_t=(@*octree_t)(_WORLD:getNodeRoot(-CHUNK_SIZE*WORLD_SIZE*2,-CHUNK_SIZE*WORLD_SIZE*2,-CHUNK_SIZE*WORLD_SIZE*2))
print("boot",WORLD.parent_node)
for i = -WORLD_SIZE,WORLD_SIZE do
	for k = -WORLD_HEIGHT,WORLD_HEIGHT do
		for j = -WORLD_SIZE,WORLD_SIZE do
			WORLD:addNode(i*CHUNK_SIZE,k*CHUNK_SIZE,j*CHUNK_SIZE)
			addToQueue(TASKS_IDS.CREATE_CHUNK,{i,k,j},WORLD)
			--genChunk((@*chunk_t)(WORLD:getNode(i*CHUNK_SIZE,k*CHUNK_SIZE,j*CHUNK_SIZE)),i,k,j)
		end
	end
	print((i+WORLD_SIZE)/(2*WORLD_SIZE)*100)
end

while not allTasksDone() do
	print(queueLenght(),(WORLD_VOLUME-queueLenght())/WORLD_VOLUME*100)
	--assert(C.thrd_sleep(&(@C.timespec){tv_nsec=1000000000},nilptr) == C.thrd_success)  --to avoid blocking CPU
	WaitTime(0.5)
end

print("World generation took :",GetTime()-t,"seconds")
local t2=GetTime()
for i = -WORLD_SIZE,WORLD_SIZE do
	for k = -WORLD_HEIGHT,WORLD_HEIGHT do
		for j = -WORLD_SIZE,WORLD_SIZE do
			--((@*chunk_t)(WORLD:getNode(i*CHUNK_SIZE,k*CHUNK_SIZE,j*CHUNK_SIZE))):loadTexture(WORLD)
			addToQueue(TASKS_IDS.LOAD_CHUNK_TEXTURE,{i*CHUNK_SIZE,k*CHUNK_SIZE,j*CHUNK_SIZE},WORLD)
		end
	end
	print((i+WORLD_SIZE)/(2*WORLD_SIZE)*100)
end

while (not allTasksDone()) and (#MeshGPUQueue>=0) do
	--print(#MeshGPUQueue,queueLenght(),(WORLD_VOLUME-queueLenght())/WORLD_VOLUME*100)
	--assert(C.thrd_sleep(&(@C.timespec){tv_nsec=1000000000},nilptr) == C.thrd_success)  --to avoid blocking CPU
	assert(C.mtx_lock(&MeshGPUQueue_mtx) == C.thrd_success)
		for i = 0,<#MeshGPUQueue do
			local itm = MeshGPUQueue:pop()
			print(itm.x)
			local chk = ((@*chunk_t)(WORLD:getNode(itm.x,itm.y,itm.z)))
			chk:UploadTexture(itm.mapMesh,itm.boolean)

		end
	assert(C.mtx_unlock(&MeshGPUQueue_mtx) == C.thrd_success)
	--print(#MeshGPUQueue +1)
	--WaitTime(0.1)

end
print(-(1<<62),-(1<<62),-(1<<62),(1_u64<<63)//CHUNK_SIZE)
print("Chunk meshing took :",GetTime()-t2,"seconds")
print("World loading took :",GetTime()-t ,"seconds")
t=GetTime()

----Shader

local shader:Shader = LoadShader("lighting.vs","lighting.fs")
  shader.locs[SHADER_LOC_VECTOR_VIEW] =  GetShaderLocation(shader, "viewPos");

  -- Set shader value: ambient light level
  local ambientLoc:cint = GetShaderLocation(shader, "ambient");
  local var:[4]float64 = { 0.1, 0.1, 0.1, 100.0 }
  SetShaderValue(shader, ambientLoc, &var, SHADER_UNIFORM_VEC4);


global function drawing(block: function()) <inline>
	--assert(C.mtx_lock(&mutex) == C.thrd_success)
  BeginDrawing()
  --assert(C.mtx_unlock(&mutex) == C.thrd_success)
  block()
  DrawFPS(10, 10);
  --DrawText(tostring(camera.position.x),2,40,15,RED)
  --DrawText(tostring(camera.position.y),2,60,15,RED)
  --DrawText(tostring(camera.position.z),2,80,15,RED)
  --print(tostring(camera.position.y))
  EndDrawing()
end

global function Mode3D(camera: Camera3D ,block: function()) <inline>
  BeginMode3D(camera)
  BeginShaderMode(shader)
  block()
  EndShaderMode()
  EndMode3D()
end

global function drawLoop() <inline>
	local chk:*chunk_t
	local v1:Vector3,v2:Vector3,v3:Vector3,v4:Vector3,d:float32
		for i = C.floor(camera.position.x)-CHUNK_SIZE*renderDistance,C.floor(camera.position.x)+CHUNK_SIZE*renderDistance,CHUNK_SIZE do
			for k = C.floor(camera.position.y)+CHUNK_SIZE*renderDistance,C.floor(camera.position.y)-CHUNK_SIZE*renderDistance,-CHUNK_SIZE do
				for j = C.floor(camera.position.z)-CHUNK_SIZE*renderDistance,C.floor(camera.position.z)+CHUNK_SIZE*renderDistance,CHUNK_SIZE do
					--local ang = math.abs(Vector3DotProduct((camera.target/(#camera.target)),((camera.position-Vector3{i,k,j})/#(camera.position-Vector3{i,k,j}))))
					v4=Vector3{i,k,j}+Vector3{CHUNK_SIZE//2,CHUNK_SIZE//2,CHUNK_SIZE//2}
					v1,v2 = GetCameraForward(&camera),camera.position-v4
					v3=v2/#v2
					d=Vector3DistanceSqr(camera.position,v4)
					--print(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,(Vector3Angle(v1,v2)))
					if ((Vector3Angle(v1,v3)) < 2.1 and d>CHUNK_SIZE*CHUNK_SIZE*10) --[[or d>(renderDistance*CHUNK_SIZE*#[math.sqrt(3)]# + CHUNK_SIZE_DIAGONAL)]] then continue end
					chk=(@*chunk_t)(WORLD:getNode(i,k,j))
					--print(chk.state)
					if chk.state==CHUNK_STATES.VOID then
							WORLD:addNode(i,k,j)
							addToQueue(TASKS_IDS.CREATE_CHUNK,{i//CHUNK_SIZE,k//CHUNK_SIZE,j//CHUNK_SIZE},WORLD)
							--addToQueue(TASKS_IDS.FULL_CHUNK,{i,k,j},WORLD)
							chk = (@*chunk_t)(WORLD:getNode(i,k,j))
							--print(chk.state)
							--genChunk(chk,i//CHUNK_SIZE,k//CHUNK_SIZE,j//CHUNK_SIZE)
							--print(chk.state)
							--addToQueue(TASKS_IDS.LOAD_CHUNK_TEXTURE,{i,k,j},WORLD)
							--print(chk.state)
					end
					if chk.state == CHUNK_STATES.GENERATED then
						--chk:loadTexture(WORLD)--remesh(WORLD)
						addToQueue(TASKS_IDS.LOAD_CHUNK_TEXTURE,{i,k,j},WORLD)
					end
					--if chk.state == CHUNK_STATES.GENERATED and chk.state~=CHUNK_STATES.LOADING then
					--	addToQueue(TASKS_IDS.LOAD_CHUNK_TEXTURE,{i,k,j},WORLD)
					--end
					chk:draw()
				end
			end
		end
		--ent:draw()
	--[[local oct:*octree_t
		for i = C.floor(camera.position.x)-2*CHUNK_SIZE*renderDistance,C.floor(camera.position.x)+2*CHUNK_SIZE*renderDistance,2*CHUNK_SIZE do
			for k = C.floor(camera.position.y)+2*CHUNK_SIZE*renderDistance,C.floor(camera.position.y)-2*CHUNK_SIZE*renderDistance,-2*CHUNK_SIZE do
				for j = C.floor(camera.position.z)-2*CHUNK_SIZE*renderDistance,C.floor(camera.position.z)+2*CHUNK_SIZE*renderDistance,2*CHUNK_SIZE do
					--local ang = math.abs(Vector3DotProduct((camera.target/(#camera.target)),((camera.position-Vector3{i,k,j})/#(camera.position-Vector3{i,k,j}))))
					v4=Vector3{i,k,j}+Vector3{CHUNK_SIZE,CHUNK_SIZE,CHUNK_SIZE}
					v1,v2 = GetCameraForward(&camera),camera.position-v4
					v3=v2/#v2
					d=Vector3DistanceSqr(camera.position,v4)
					--print(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z,(Vector3Angle(v1,v2)))
					if ((Vector3Angle(v1,v3) < 2.1) or (d//CHUNK_SIZE<(renderDistance*CHUNK_SIZE*#[math.sqrt(3)]# - CHUNK_SIZE_DIAGONAL))) then continue end
					oct=(@*octree_t)(WORLD:getNodeRoot(i,k,j))
					if oct.ready == 0 and oct.pos.s == CHUNK_SIZE*2 then
						--oct:genMesh(oct.pos.s//CHUNK_SIZE)
					end
					--oct:draw()
				end
			end
		end
	--]]
end

-- Main game loop
local cameraPos:Vector3
while not WindowShouldClose() do        -- Detect window close button or ESC key
	--print(lock)
	
	-- Update
	----------------------------------------------------------------------------------

  local cameraMoveSpeed:float32 = 50*GetFrameTime();
  if (IsKeyDown(KEY_W)) then CameraMoveForward(&camera, cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_A)) then CameraMoveRight(&camera, -cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_S)) then CameraMoveForward(&camera, -cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_D)) then CameraMoveRight(&camera, cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_SPACE)) then CameraMoveUp(&camera, cameraMoveSpeed) end
  if (IsKeyDown(KEY_LEFT_CONTROL)) then CameraMoveUp(&camera, -cameraMoveSpeed) end

  local mousePositionDelta:Vector2 = GetMouseDelta()
  CameraYaw(&camera, -mousePositionDelta.x*0.003, false)
  CameraPitch(&camera, -mousePositionDelta.y*0.003, true, false, false)
  if IsMouseButtonPressed(0) then
  	local _v= GetCameraForward(&camera)
  	local v:Vector3
  	for i = 0,100 do
  		v = _v*i*.1+camera.position
  		local n=(@*chunk_t)(WORLD:getNode(C.floor(v.x),C.floor(v.y),C.floor(v.z)))
  		if WORLD:getBlock(n,C.floor(v.x),C.floor(v.y),C.floor(v.z),true) ~= 0 then
  			v = _v*(i-10)*.1+camera.position
  			--print("gjk",v.x,v.y,v.z)
  			n=(@*chunk_t)(WORLD:getNode(C.floor(v.x+.5),C.floor(v.y+.5),C.floor(v.z+.5)))
  			n:setBlock(1,C.floor(v.x+.5),C.floor(v.y+.5),C.floor(v.z+.5),true)
  			n.blockAmount = n.blockAmount + 1
  			n:remesh(WORLD)
  			break
  		end
  	end
  elseif IsMouseButtonPressed(1) then
  	local _v= GetCameraForward(&camera)
  	local v:Vector3
  	for i = 0,100 do
  		v = _v*i*.1+camera.position
  		local n=(@*chunk_t)(WORLD:getNode(C.floor(v.x),C.floor(v.y),C.floor(v.z)))
  		if WORLD:getBlock(n,C.floor(v.x),C.floor(v.y),C.floor(v.z),true) ~= 0 then
  			--print("gjk",v.x,v.y,v.z)
  			--v = _v*(i-1)+camera.position
  			n=(@*chunk_t)(WORLD:getNode(C.floor(v.x),C.floor(v.y),C.floor(v.z)))
  			n:setBlock(0,C.floor(v.x),C.floor(v.y),C.floor(v.z),true)
  			n.blockAmount = n.blockAmount - 1
  			n:remesh(WORLD)
  			break
  		end
  	end
  end
	for i = 0,<#MeshGPUQueue do assert(C.mtx_lock(&MeshGPUQueue_mtx) == C.thrd_success)
			local itm = MeshGPUQueue:pop()
			local chk = ((@*chunk_t)(WORLD:getNode(itm.x,itm.y,itm.z)))
			chk:UploadTexture(itm.mapMesh,itm.boolean)
		assert(C.mtx_unlock(&MeshGPUQueue_mtx) == C.thrd_success)
	end
	--print(#MeshGPUQueue)

	UpdateCamera(&camera, CameraMode.CAMERA_CUSTOM)
	--ent:update(WORLD,GetFrameTime())
	--cameraPos = Vector3{ camera.position.x, camera.position.y, camera.position.z };
	--SetShaderValue(shader, shader.locs[SHADER_LOC_VECTOR_VIEW], &cameraPos, SHADER_UNIFORM_VEC3);
	
	if IsKeyDown(KeyboardKey.KEY_R) then camera.target = Vector3{ 0, 0, 0 } end

	-- Draw
	----------------------------------------------------------------------------------
	drawing(function()
		ClearBackground(BLUE)

		Mode3D(camera, drawLoop)
		--WORLD:drawAllNodes()
		

	end)
end
CloseWindow()       -- Close window and OpenGL context

--panic()