require 'octreeStruct'
require 'chunkStruct'

local t = GetTime()
local WORLD:octree_t <close> = newOctree(-(1<<62),-(1<<62),-(1<<62),(1_u64<<63)//CHUNK_SIZE)
for i = -0,0 do
	for k = -32,32 do
		for j = -32,"2" do
			WORLD:addNode(i*CHUNK_SIZE,k*CHUNK_SIZE,j*CHUNK_SIZE)
		end
	end
	--WORLD:addNode(32,0,i*16)
	--WORLD:addNode(0,32,i*16)
	--WORLD:addNode(32,32,i*16)
end
print(-(1<<62),-(1<<62),-(1<<62),(1_u64<<63)//CHUNK_SIZE)
print("World generation took :",GetTime()-t,"seconds")
t=GetTime()

local SCREEN_WIDTH: uint16 <const> = 1000
local SCREEN_HEIGHT: uint16 <const> = 650

InitWindow(SCREEN_WIDTH,SCREEN_HEIGHT, "WhaleBlock v.0.0.0.00")
	local camera = Camera3D{} -- Define the camera to look into our 3d world
	camera.position = Vector3{ 10, 16*16, 10 } -- Camera position
	camera.target = Vector3{ 0, 0, 0 } -- Camera looking at point
	camera.up = Vector3{ 0, 1, 0 } -- Camera up vector (rotation towards target)
	camera.fovy = 45 -- Camera field-of-view Y
	camera.projection = 0 -- Camera projection type
	
	DisableCursor() -- Limit cursor to relative movement inside the window
	SetTargetFPS(400)
	SetTraceLogLevel(TraceLogLevel.LOG_WARNING)

----Shader

local shader:Shader = LoadShader("lighting.vs","lighting.fs")
  shader.locs[SHADER_LOC_VECTOR_VIEW] =  GetShaderLocation(shader, "viewPos");

  -- Set shader value: ambient light level
  local ambientLoc:cint = GetShaderLocation(shader, "ambient");
  local var:[4]float64 = { 0.1, 0.1, 0.1, 100.0 }
  SetShaderValue(shader, ambientLoc, &var, SHADER_UNIFORM_VEC4);


global function drawing(block: function()) <inline>
	--assert(C.mtx_lock(&mutex) == C.thrd_success)
  BeginDrawing()
  --assert(C.mtx_unlock(&mutex) == C.thrd_success)
  block()
  DrawFPS(10, 10);
  EndDrawing()
end

global function Mode3D(camera: Camera3D ,block: function()) <inline>
  BeginMode3D(camera)
  --BeginShaderMode(shader)
  block()
  --EndShaderMode()
  EndMode3D()
end

global function drawLoop()
	WORLD:drawAllNodes()
end

-- Main game loop
local cameraPos:Vector3
while not WindowShouldClose() do        -- Detect window close button or ESC key
	--print(lock)
	
	-- Update
	----------------------------------------------------------------------------------

  local cameraMoveSpeed:float32 = 50*GetFrameTime();
  if (IsKeyDown(KEY_W)) then CameraMoveForward(&camera, cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_A)) then CameraMoveRight(&camera, -cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_S)) then CameraMoveForward(&camera, -cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_D)) then CameraMoveRight(&camera, cameraMoveSpeed, true) end
  if (IsKeyDown(KEY_SPACE)) then CameraMoveUp(&camera, cameraMoveSpeed) end
  if (IsKeyDown(KEY_LEFT_CONTROL)) then CameraMoveUp(&camera, -cameraMoveSpeed) end

  local mousePositionDelta:Vector2 = GetMouseDelta()
  CameraYaw(&camera, -mousePositionDelta.x*0.003, false)
  CameraPitch(&camera, -mousePositionDelta.y*0.003, true, false, false)

	UpdateCamera(&camera, CameraMode.CAMERA_CUSTOM)
	cameraPos = Vector3{ camera.position.x, camera.position.y, camera.position.z };
	--SetShaderValue(shader, shader.locs[SHADER_LOC_VECTOR_VIEW], &cameraPos, SHADER_UNIFORM_VEC3);
	
	if IsKeyDown(KeyboardKey.KEY_R) then camera.target = Vector3{ 0, 0, 0 } end

	-- Draw
	----------------------------------------------------------------------------------
	drawing(function()
		ClearBackground(BLUE)

		Mode3D(camera, drawLoop)
		WORLD:drawAllNodes()

	end)
end
CloseWindow()       -- Close window and OpenGL context

--panic()