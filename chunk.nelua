
require "hashmap"
require "math"

local float32Pointer = @pointer(float32)
local cushortPointer = @pointer(cushort)
local function AllocateMeshData(mesh:*Mesh,triangleCount:integer)
	mesh.vertexCount = triangleCount*3
	mesh.triangleCount = triangleCount

	mesh.vertices = --[[pointer(float32)(]]float32Pointer(MemAlloc(mesh.vertexCount * 3 * #float32))
	mesh.texcoords = --[[pointer(float32)(]]float32Pointer(MemAlloc(mesh.vertexCount * 2 * #float32))
	--mesh.normals = --[[pointer(float32)(]]float32Pointer(MemAlloc(mesh.vertexCount * 3 * #float32))
	--mesh.indices = cushortPointer(MemAlloc(mesh.vertexCount*#cushort))
end

global CHUNK_STATES = @enum{
	NEW=0,
	EMPTY=1,
	GENERATED=2,
	MODEL_DONE=3
}
global Chunk: type = @record{
	blockArray:[chunkBlockSize]byte,
	blockDictionary:[#byte]uint32,
	blockAmount:uint32,
	pos:Cube,
	state:CHUNK_STATES,
	--root:pointer,
	model:Model
}
global t_worldMap = @hashmap([3]int32,*Chunk)

function Chunk.__atindex(chk:*Chunk,key:integer)
	return chk.blockArray[key] end
function Chunk.__index(chk:*Chunk,key:integer)
	return chk.blockArray[key] end
function Chunk:draw()
	--DrawModel(self.model,Vector3{0,0,0},1.0,WHITE)
	--print(self.pos[0] * chunkSize,self.pos[1] * chunkSize,self.pos[2] * chunkSize)
	DrawModel(self.model,Vector3{self.pos[0],self.pos[1],self.pos[2]},1.0,WHITE)
end
global d_Empty_Chunk:Chunk
global d_EmptyModel:Model
d_Empty_Chunk.state = CHUNK_STATES.EMPTY
print(#@Chunk)

global function getChunk(world:*t_worldMap,x:int32,y:int32,z:int32):*Chunk
	--assert(C.mtx_lock(&mutex) == C.thrd_success)
	local chk=world:peek({math.floor(x/chunkSize),math.floor(y/chunkSize),math.floor(z/chunkSize)})
	--assert(C.mtx_unlock(&mutex) == C.thrd_success)
		if chk~=nilptr and $chk then
			return $chk
		end return &d_Empty_Chunk
end

global function getBlock(world:*t_worldMap,chunk:*Chunk,x:int32,y:int32,z:int32):byte--uint32
	--if (x<0 or y<0 or z<0 or x>chunkSize-1 or y>chunkSize-1 or z>chunkSize-1) then
		--return 0
		--world:rehash()
		local pos=chunk.pos:toVec()+Vector3{x,y,z}

		x,y,z=pos.x,pos.y,pos.z
		---print(x,y,z,"help",x%chunkSize,y%chunkSize,z%chunkSize);
		--return getBlock(world,getChunk(x + chunk.pos[0],y + chunk.pos[1],z + chunk.pos[2]),x%chunkSize,y%chunkSize,z%chunkSize,true)
		--print(math.floor(x/chunkSize),math.floor(z/chunkSize))
		--assert(C.mtx_lock(&mutex) == C.thrd_success)
		local chk=world:peek({math.floor(x/chunkSize),math.floor(y/chunkSize),math.floor(z/chunkSize)})
		--assert(C.mtx_unlock(&mutex) == C.thrd_success)
		if chk~=nilptr and $chk then
			return ($chk).blockArray[x%chunkSize*chunkSize*chunkSize+y%chunkSize*chunkSize+z%chunkSize]
		end return 0
	--end
	-- or y<0 or z<0 or x>chunkSize-1 or y>chunkSize-1 or z>chunkSize-1 then return 0 end
	--print(x,y,z,chunk.blockArray[x*chunkSize*chunkSize + y*chunkSize + z])
	return 0 end--chunk.blockArray[x*chunkSize*chunkSize + y*chunkSize + z] end

global function setBlock(chunk:*Chunk,x:uint32,y:uint32,z:uint32,v:byte)
	chunk.blockArray[x*chunkSize*chunkSize + y*chunkSize + z] = v end

local texture = LoadTexture("assets/TexturePack.png")
local tileSize = 16
local textureUV_Size:Vector2 = {tileSize/texture.width,tileSize/texture.height}
local TEXTURE_UVS_INDEX = @enum{
	GRASS = 0,
	DIRT = 2,
	GRASSDIRT = 1,
}
print(textureUV_Size.x,textureUV_Size.y,2/textureUV_Size.x,2/textureUV_Size.y)
local TEXTURE_UVS:[25]Vector2 = {
	Vector2{1*textureUV_Size.x,1*textureUV_Size.y},
	Vector2{2*textureUV_Size.x,1*textureUV_Size.y},
	Vector2{3*textureUV_Size.x,1*textureUV_Size.y},
}

--[[
local test:[6][6]Vector3 = {
	{ {0,0,0}, {1,0,0}, {1,1,0}, {0,0,0}, {1,1,0}, {0,1,0}, },
	{ {0,0,0}, {0,1,0}, {0,1,1}, {0,0,0}, {0,1,1}, {0,0,1}, },
	{ {0,0,0}, {0,0,1}, {1,0,1}, {0,0,0}, {1,0,1}, {1,0,0}, },
}--]]
local rev:[6][2]boolean ={
    	{true,true},
    	{false,false},
    	{false,true},
    	{false,false},
    	{true,true},
    	{true,false},
    }
local function addFace(mesh:*Mesh,dataindex:*integer,x:int32,y:int32,z:int32, mx:byte,my:byte,mz:byte, uv:Vector2, c:float32,reverse:boolean,reverse2:boolean)
	local u,v = uv.x,uv.y
	local i:byte = 0
	local g:[6]byte = {1,2,3,4,5,6}--{}--,6,5,4}
    		local g2:[6]byte={3,2,1,6,5,4}
	if reverse then g={3,2,1,6,5,4}	end
	local primary:boolean
	local secondary:boolean
  for k=1,6 do
  	i = g[k-1]
    primary = i%2 == 1
    secondary= i > 2 and i < 6
    --print(x+(mx == 1 and primary and 1 or 0) + (mx == 2 and secondary and 1 or 0),y+(my == 1 and primary and 1 or 0) + (my == 2 and secondary and 1 or 0),z+(mz == 1 and primary and 1 or 0) + (mz == 2 and secondary and 1 or 0))
    mesh.vertices[ $dataindex*3  ] = x + (mx == 1 and primary and 1 or 0) + (mx == 2 and secondary and 1 or 0) --test[i-1][0].x
    mesh.vertices[ $dataindex*3+1] = y + (my == 1 and primary and 1 or 0) + (my == 2 and secondary and 1 or 0) --test[i-1][1].y
    mesh.vertices[ $dataindex*3+2] = z + (mz == 1 and primary and 1 or 0) + (mz == 2 and secondary and 1 or 0) --test[i-1][2].z

    if reverse2 then
    	if reverse then 
    		primary =  rev[k-1][0]
    		secondary= rev[k-1][1]
    	else
    		primary =  rev[g2[k-1]-1][0]
    		secondary= rev[g2[k-1]-1][1]
    	end
  	end
    mesh.texcoords[$dataindex*2  ] = u - textureUV_Size.x*(primary and 1 or 0)
    mesh.texcoords[$dataindex*2+1] = v - textureUV_Size.y*(secondary and 1 or 0)
    --mesh.colors[$dataindex*4]  = c*255
    $dataindex = $dataindex+1
  end
end

local function genMesh(world:*t_worldMap,chunk: *Chunk)
	local mapMesh:Mesh = {0}

	--To quickly strip out invisible chunks
	if chunk.blockAmount==0 then UploadMesh(&mapMesh,false); return mapMesh end
	if chunk.blockAmount==chunkBlockSize then
		if getChunk(world,chunk.pos[0]+chunkSize,chunk.pos[1],chunk.pos[2]).blockAmount ==chunkBlockSize and
		   getChunk(world,chunk.pos[0]-chunkSize,chunk.pos[1],chunk.pos[2]).blockAmount ==chunkBlockSize and
		   getChunk(world,chunk.pos[0],chunk.pos[1]+chunkSize,chunk.pos[2]).blockAmount ==chunkBlockSize and
		   getChunk(world,chunk.pos[0],chunk.pos[1]-chunkSize,chunk.pos[2]).blockAmount ==chunkBlockSize and
		   getChunk(world,chunk.pos[0],chunk.pos[1],chunk.pos[2]+chunkSize).blockAmount ==chunkBlockSize and
		   getChunk(world,chunk.pos[0],chunk.pos[1],chunk.pos[2]-chunkSize).blockAmount ==chunkBlockSize then UploadMesh(&mapMesh,false); return mapMesh end
	end

--print()
	local facecount = 0
	for x:int32=0, chunkSize-1 do
	  for y:int32=0, chunkSize-1 do
	    for z:int32=0, chunkSize-1 do
	      if getBlock(world,chunk, x,y,z) ~= 0 then
	      	--print(x,y,z,getBlock(world,chunk, x,y,z))
	        if getBlock(world,chunk, x+1,y,z) == 0 then facecount = facecount + 1 end
  	      if getBlock(world,chunk, x-1,y,z) == 0 then facecount = facecount + 1 end
    	    if getBlock(world,chunk, x,y+1,z) == 0 then facecount = facecount + 1 end
      	  if getBlock(world,chunk, x,y-1,z) == 0 then facecount = facecount + 1 end
          if getBlock(world,chunk, x,y,z+1) == 0 then facecount = facecount + 1 end
          if getBlock(world,chunk, x,y,z-1) == 0 then facecount = facecount + 1 end
        end
  	  end
  	end
	end
--print(facecount)
	local count = facecount*6
	if count > 0 then
    local dataindex:int64 = 0
    
		AllocateMeshData(&mapMesh,facecount*2)
    local emptyUV = Vector2{0,0}
    for z=0, chunkSize-1 do
      for x=0, chunkSize-1 do
        for y=0, chunkSize-1 do
          local b0,b1,b2,b3,b4,b5,b6 = getBlock(world,chunk, x,y,z),getBlock(world,chunk, x-1,y,z),getBlock(world,chunk, x+1,y,z),getBlock(world,chunk, x,y-1,z),getBlock(world,chunk, x,y+1,z),getBlock(world,chunk, x,y,z-1),getBlock(world,chunk, x,y,z+1)
          if b0 ~= 0 then
            if b1 == 0 then addFace(&mapMesh,&dataindex,x,y,z,   0,1,2, TEXTURE_UVS[TEXTURE_UVS_INDEX.GRASSDIRT],1,false,true) end
            if b2 == 0 then addFace(&mapMesh,&dataindex,x+1,y,z, 0,1,2, TEXTURE_UVS[TEXTURE_UVS_INDEX.GRASSDIRT],1,true,true) end
            if b3 == 0 then addFace(&mapMesh,&dataindex,x,y,z,   1,0,2, TEXTURE_UVS[TEXTURE_UVS_INDEX.DIRT],1,true) end
            if b4 == 0 then addFace(&mapMesh,&dataindex,x,y+1,z, 1,0,2, TEXTURE_UVS[TEXTURE_UVS_INDEX.GRASS],1,false) end
            if b5 == 0 then addFace(&mapMesh,&dataindex,x,y,z,   1,2,0, TEXTURE_UVS[TEXTURE_UVS_INDEX.GRASSDIRT],1,false) end
            if b6 == 0 then addFace(&mapMesh,&dataindex,x,y,z+1, 1,2,0, TEXTURE_UVS[TEXTURE_UVS_INDEX.GRASSDIRT],1,true) end
          end
        end
      end
    end
	end

	--[[for i = 1,chunkSize do
		for k = 1,chunkSize do
			for j = 1,chunkSize do
				if getBlock(world,&map,i-1,k-1,j-1) == 1 then
					cubePosition = Vector3{i-1,k-1,j-1}
					--(cubePosition, 1, 1, 1, GREEN)
				end
			end
		end
	end]]
	UploadMesh(&mapMesh,false)
	return mapMesh
end


global function genChunk(chunk:*Chunk, x:int32,y:int32,z:int32)
	--print(x,y,z)
	if chunk.state>CHUNK_STATES.NEW then return end
	chunk.state=CHUNK_STATES.GENERATED
	--chunk.class = &CHUNK_CLASS
	chunk.pos = Cube{chunkSize*x,chunkSize*y,chunkSize*z,chunkSize}
	local tempImg = GenImagePerlinNoise(chunkSize,chunkSize,chunk.pos[0],chunk.pos[2],chunkSize/512)
	--local tempImg = GenImagePerlinNoise(chunkSize,chunkSize,0,0,1/2)
	--local size:cint = (chunkSize*chunkSize*#int32)
	--local next = ExportImageAsCode(tempImg,"bmp.c")
	--UnloadImage(testImg)
	local blockAmount:uint32 = 0
	for i = 1,chunkSize do
		for k = 1,chunkSize do
			for j = 1,chunkSize do
				if GetImageColor(tempImg,(i-1),j-1).r>k+y*chunkSize then
				--if j>chunkSize//2 or j == 1 then
					setBlock(chunk,i-1,k-1,j-1,1)
					blockAmount=blockAmount+1
				else
					setBlock(chunk,i-1,k-1,j-1,0)
				end
			end
		end
	end
	chunk.blockAmount = blockAmount
		--local heightMap = LoadTextureFromImage(tempImg)
		--UnloadImage(tempImg)
	--general_allocator:dealloc(&testImg)
	--UnloadImage(testImg)
	
	--print(GetTime()-time_sample)
	return chunk
end


local function facesId(world:*t_worldMap,pos:*Cube)
    local a:int8,b:int8,c:int8,t:[6]pointer(Chunk)=0,0,0,{}
    for d = 1,6 do
        a,b,c =0,0,0
        if     d == 1 then a=1
        elseif d == 2 then a=-1
        elseif d == 3 then b=1
        elseif d == 4 then b=-1
        elseif d == 5 then c=1
        elseif d == 6 then c=-1
        end
        --print(d)
        t[d-1]=getChunk(world,a*chunkSize+pos[0],b*chunkSize+pos[1],c*chunkSize+pos[2])
        --print("d")
    end
    return t
end

global function setMesh(world:*t_worldMap,chunk:*Chunk)
	--print(chunk.state)
	if not(chunk.state==CHUNK_STATES.EMPTY) then
		UnloadModel(chunk.model)

		--assert(C.mtx_lock(&mutex) == C.thrd_success)
		local mapMesh = genMesh(world,chunk)
		--assert(C.mtx_unlock(&mutex) == C.thrd_success)
		local mapModel = LoadModelFromMesh(mapMesh)
		mapModel.materials.maps.texture = texture
		--assert(C.mtx_lock(&mutex) == C.thrd_success)
		chunk.model=mapModel
		chunk.state = CHUNK_STATES.MODEL_DONE
		--assert(C.mtx_unlock(&mutex) == C.thrd_success)
	end
end

global function ReMesh(world:*t_worldMap,x:int32,y:int32,z:int32)
	local chunk = getChunk(world,x,y,z)
	--print(chunk.pos.x//chunkSize,chunk.pos.y//chunkSize,chunk.pos.z//chunkSize)
	for k = 0,5 do
		local v:pointer(Chunk) = facesId(world,chunk.pos)[k]
		--print(v.state)
		assert(C.mtx_lock(&mutex) == C.thrd_success)
		if v and (v.state>CHUNK_STATES.EMPTY) then setMesh(world,v) end
		assert(C.mtx_unlock(&mutex) == C.thrd_success)
		
	end

	assert(C.mtx_lock(&mutex) == C.thrd_success)
	chunk = getChunk(world,x,y,z)
	if (chunk.state>CHUNK_STATES.EMPTY) then setMesh(world,chunk) end
	assert(C.mtx_unlock(&mutex) == C.thrd_success)
	--print(GetTime()-time_sample)
	return true
end

global ModelObject:type = @record{model:Model,pos:Cube,empty:boolean}
local d_EmptyModelObject:ModelObject
d_EmptyModelObject.empty=true

global function _calcMesh(world:*t_worldMap,chunk:*Chunk): ModelObject
	if (chunk.state>CHUNK_STATES.EMPTY) then
		--UnloadModel(chunk.model)
		local mapMesh = genMesh(world,chunk)
		local mapModel = LoadModelFromMesh(mapMesh)
		mapModel.materials.maps.texture = texture
		local tmp1:ModelObject = {model=mapModel,pos=chunk.pos,empty=false}
		--local tmp2 = MemAlloc(#@Model+#@Cube+#@boolean)
		return tmp1
	end
	return d_EmptyModelObject
end

global meshCluster:type = @[7]ModelObject
global emptyout:meshCluster
do
	local _emptyout:[7]ModelObject = {d_EmptyModelObject,d_EmptyModelObject,d_EmptyModelObject,d_EmptyModelObject,d_EmptyModelObject,d_EmptyModelObject,d_EmptyModelObject}
	emptyout = _emptyout
end

global function calcReMesh(world:*t_worldMap,x:int32,y:int32,z:int32):meshCluster
	if x==0 and y==0 and z==0 then return emptyout end
	--_tm_lock()
	local out:meshCluster-- = (@*meshCluster)(MemAlloc(#(@meshCluster)))
	--_tm_unlock()

	--print("preparing chunk at",x,y,z)
	--print("pre-chunk")
	local chunk = getChunk(world,x,y,z)
	local neighbors =facesId(world,chunk.pos)
	for k = 0,5 do
		local v:pointer(Chunk) = neighbors[k]
		if v and (v.state>CHUNK_STATES.EMPTY) then out[k]=_calcMesh(world,v) end
	end
	if (chunk.state>CHUNK_STATES.EMPTY) then out[6]=_calcMesh(world,chunk) end
	chunk.state=CHUNK_STATES.MODEL_DONE
	--print("out")
	return out
end